'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = text;

var _elementExists = require('../util/element-exists');

var _elementExists2 = _interopRequireDefault(_elementExists);

var _defaultConfig = require('../util/default-config');

var _defaultConfig2 = _interopRequireDefault(_defaultConfig);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function text(client, chai, utils, options) {
    var config = (0, _defaultConfig2.default)(options);
    chai.Assertion.addMethod('text', function (expected) {
        var selector = utils.flag(this, 'object');
        var immediately = utils.flag(this, 'immediately');

        if (!immediately) {
            (0, _elementExists2.default)(client, selector, config.defaultWait, false);
        }

        var getText = client.getText(selector);
        var textArray = getText instanceof Array ? getText : [getText];

        var elementTextAsExpected;
        if (expected instanceof RegExp) {
            elementTextAsExpected = textArray.some(function (text) {
                return text.match(expected);
            });
        } else {
            elementTextAsExpected = textArray.some(function (text) {
                return text === expected;
            });
        }

        this.assert(elementTextAsExpected, 'Expected element <' + selector + '> to contain text "' + expected + '", but only found: ' + textArray, 'Expected element <' + selector + '> not to contain text "' + expected + '", but found: ' + textArray);
    });
}