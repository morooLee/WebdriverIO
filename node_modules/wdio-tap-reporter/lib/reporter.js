"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var events_1 = require("events");
var os_1 = require("os");
var process = require("process");
var TapReporter = (function (_super) {
    __extends(TapReporter, _super);
    function TapReporter(baseReporter, config, options) {
        var _this = _super.call(this) || this;
        _this.suites = [];
        _this.onTestResult = function (test) {
            _this.results.done++;
            var testTitle = _this.getTestPath(test);
            var description = "# [Runner: " + test.cid + "] " + testTitle;
            var lines = [description];
            var done = _this.results.done;
            switch (test.type) {
                case "test:pass":
                case "test:pending":
                    if (test.pending) {
                        _this.results.skip++;
                    }
                    else {
                        _this.results.pass++;
                    }
                    var directive = test.pending ? " # SKIP Test skipped" : "";
                    lines.push("ok " + done + " - " + testTitle + directive);
                    break;
                case "test:fail":
                    _this.results.fail++;
                    var error = test.err || {};
                    lines.push("not ok " + done + " - " + testTitle);
                    lines.push("# Diagnostics");
                    lines.push("  ---");
                    lines.push("  message: " + (error.message || "Test failed without message"));
                    lines.push("  severity: fail");
                    lines.push("  data:");
                    lines.push("    file: " + test.file);
                    if (error.type) {
                        lines.push("    type: " + error.type);
                    }
                    if (error.stack) {
                        lines.push("    stack: " + error.stack);
                    }
                    lines.push("  ...");
                    break;
                default:
                    lines.push("Bail out! Test " + done + " has incorrect state and could not be processed");
            }
            TapReporter.out(lines.join(os_1.EOL));
        };
        _this.baseReporter = baseReporter;
        _this.config = config;
        _this.options = options;
        _this.results = {
            pass: 0,
            skip: 0,
            fail: 0,
            tests: 0,
            done: 0
        };
        _this.on("start", function () { return TapReporter.out("TAP version 13"); });
        _this.on("suite:start", function (suite) { return _this.suites.push(suite); });
        _this.on("test:start", function () { return _this.results.tests++; });
        _this.on("test:pass", _this.onTestResult);
        _this.on("test:fail", _this.onTestResult);
        _this.on("test:pending", _this.onTestResult);
        _this.on("end", function () {
            var _a = _this.results, fail = _a.fail, pass = _a.pass, skip = _a.skip, tests = _a.tests;
            var duration = _this.baseReporter.stats._duration;
            var total = tests + skip;
            if (total === 0) {
                TapReporter.out("1..0 # SKIP No tests present");
            }
            var lines = [
                "1.." + total,
                "# tests " + total,
                "# pass " + pass,
                "# skip " + skip,
                "# fail " + fail,
                "# Finished in " + duration + "ms"
            ];
            TapReporter.out(lines.join(os_1.EOL));
        });
        return _this;
    }
    TapReporter.out = function (chunk) {
        process.stdout.write(chunk);
        process.stdout.write(os_1.EOL);
    };
    TapReporter.prototype.getTestPath = function (test) {
        if (test.uid === test.parentUid) {
            return test.title;
        }
        var parents = [];
        var path = [test.title];
        var suites = this.suites.filter(function (suite) { return suite.cid === test.cid; });
        var parent = suites.find(function (suite) { return suite.uid === test.parentUid; });
        if (parent) {
            path.push(parent.title);
            while (parent.title !== parent.parent) {
                parent = suites.find(function (suite) { return suite.title === parent.parent; });
                if (parent) {
                    parents.push(parent.uid);
                    path.push(parent.title);
                }
            }
        }
        return path.slice().reverse().join(" \u203A ");
    };
    return TapReporter;
}(events_1.EventEmitter));
module.exports = TapReporter;
//# sourceMappingURL=reporter.js.map